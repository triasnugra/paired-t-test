# -*- coding: utf-8 -*-
"""uji normalitas pretest posttest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x7e7Xx8pg0JWG3DESLRhe06I4sYc2DTw
"""

import scipy.stats as stats

# Data
pre_test_scores = [62, 68, 70, 70, 72, 75, 76, 78, 79, 60, 64, 67, 69, 71, 74, 65, 66, 68, 73, 77]
post_test_scores = [70, 76, 78, 80, 82, 85, 86, 88, 90, 68, 72, 76, 78, 80, 83, 72, 74, 77, 80, 83]

# Perform the Shapiro-Wilk test for normality
pre_test_normality = stats.shapiro(pre_test_scores)
post_test_normality = stats.shapiro(post_test_scores)

# Function to interpret the result
def interpret_shapiro(p_value):
    if p_value > 0.05:
        return "The data distribution is normal."
    else:
        return "The data distribution is not normal."

# Output the results
print("Pre-test Shapiro-Wilk Test:")
print(f"Statistic: {pre_test_normality.statistic}, p-value: {pre_test_normality.pvalue}")
print(interpret_shapiro(pre_test_normality.pvalue))

print("\nPost-test Shapiro-Wilk Test:")
print(f"Statistic: {post_test_normality.statistic}, p-value: {post_test_normality.pvalue}")
print(interpret_shapiro(post_test_normality.pvalue))

import matplotlib.pyplot as plt
import seaborn as sns

# Prepare the data
data = {
    "Pre-test": pre_test_scores,
    "Post-test": post_test_scores
}

# Set style for modern and elegant look
sns.set(style="whitegrid", palette="muted")

# Create the figure and axes
fig, axes = plt.subplots(1, 2, figsize=(12, 6))

# Plot pre-test scores distribution
sns.histplot(data['Pre-test'], bins=10, kde=True, color="dodgerblue", ax=axes[0])
axes[0].set_title("Pre-test Scores Distribution", fontsize=14, weight='bold')
axes[0].set_xlabel("Scores", fontsize=12)
axes[0].set_ylabel("Frequency", fontsize=12)

# Plot post-test scores distribution
sns.histplot(data['Post-test'], bins=10, kde=True, color="salmon", ax=axes[1])
axes[1].set_title("Post-test Scores Distribution", fontsize=14, weight='bold')
axes[1].set_xlabel("Scores", fontsize=12)
axes[1].set_ylabel("Frequency", fontsize=12)

# Add some style elements
fig.suptitle("Pre-test and Post-test Scores Normality Check", fontsize=16, weight='bold')
sns.despine()

# Show the plot
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import scipy.stats as stats

# Set up the figure for two Q-Q plots (pre-test and post-test)
fig, axes = plt.subplots(1, 2, figsize=(12, 6))

# Q-Q plot for pre-test scores
stats.probplot(pre_test_scores, dist="norm", plot=axes[0])
axes[0].get_lines()[1].set_color('lightblue')  # Line color
axes[0].get_lines()[0].set_markerfacecolor('blue')  # Data point color
axes[0].get_lines()[0].set_markeredgecolor('blue')
axes[0].set_title('Q-Q Plot for Pre-test Scores', fontsize=14, weight='bold')
axes[0].set_xlabel('Theoretical Quantiles', fontsize=12)
axes[0].set_ylabel('Ordered Values', fontsize=12)

# Q-Q plot for post-test scores
stats.probplot(post_test_scores, dist="norm", plot=axes[1])
axes[1].get_lines()[1].set_color('lightcoral')  # Line color
axes[1].get_lines()[0].set_markerfacecolor('red')  # Data point color
axes[1].get_lines()[0].set_markeredgecolor('red')
axes[1].set_title('Q-Q Plot for Post-test Scores', fontsize=14, weight='bold')
axes[1].set_xlabel('Theoretical Quantiles', fontsize=12)
axes[1].set_ylabel('Ordered Values', fontsize=12)

# Set global title
fig.suptitle("Q-Q Plots: Pre-test and Post-test Scores", fontsize=16, weight='bold')

# Adjust layout
plt.tight_layout(pad=2)
plt.show()