# -*- coding: utf-8 -*-
"""hasil pretest posttest 4w1h p3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o8p6R7f1xCgvJXsZLFg4ph1yzkSsPF5s
"""

import numpy as np
import scipy.stats as stats

# Data Pre-Test dan Post-Test
pre_test_scores = np.array([62, 68, 70, 70, 72, 75, 76, 78, 79, 60, 64, 67, 69, 71, 74, 65, 66, 68, 73, 77])
post_test_scores = np.array([70, 76, 78, 80, 82, 85, 86, 88, 90, 68, 72, 76, 78, 80, 83, 72, 74, 77, 80, 83])

# Uji t berpasangan
t_stat, p_value = stats.ttest_rel(post_test_scores, pre_test_scores)

# Hasil
print(f"Nilai t-statistik: {t_stat:.2f}")
print(f"Nilai p-value: {p_value:.4f}")

# Uji hasil
if t_stat > -1.73 and p_value < 0.020:
    print("Hasil uji menunjukkan peningkatan yang signifikan.")
else:
    print("Hasil uji tidak signifikan.")

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# Data Pre-Test dan Post-Test
pre_test_scores = np.array([62, 68, 70, 70, 72, 75, 76, 78, 79, 60, 64, 67, 69, 71, 74, 65, 66, 68, 73, 77])
post_test_scores = np.array([70, 76, 78, 80, 82, 85, 86, 88, 90, 68, 72, 76, 78, 80, 83, 72, 74, 77, 80, 83])

# Menyiapkan data untuk visualisasi
data = {
    'Scores': np.concatenate([pre_test_scores, post_test_scores]),
    'Test Type': ['Pre-Test'] * len(pre_test_scores) + ['Post-Test'] * len(post_test_scores)
}

# Membuat DataFrame
df = pd.DataFrame(data)

# Set style and color palette
sns.set(style='whitegrid')
palette = sns.color_palette("pastel", n_colors=2)  # Mengatur jumlah warna yang tepat

# Plot distribusi skor
plt.figure(figsize=(14, 7))

# Plot distribusi
plt.subplot(1, 2, 1)
sns.histplot(df[df['Test Type'] == 'Pre-Test']['Scores'], color=palette[0], label='Pre-Test', kde=True, bins=10, stat='density')
sns.histplot(df[df['Test Type'] == 'Post-Test']['Scores'], color=palette[1], label='Post-Test', kde=True, bins=10, stat='density')
plt.title('Distribusi Skor Pre-Test dan Post-Test')
plt.xlabel('Skor')
plt.ylabel('Kepadatan')
plt.legend()

# Plot boxplot
plt.subplot(1, 2, 2)
sns.boxplot(x='Test Type', y='Scores', data=df, palette=palette, hue='Test Type')
plt.title('Box Plot Skor Pre-Test dan Post-Test')
plt.xlabel('Tipe Tes')
plt.ylabel('Skor')

plt.tight_layout()
plt.show()

import numpy as np
import pandas as pd
import plotly.graph_objects as go

# Data Pre-Test dan Post-Test
pre_test_scores = np.array([62, 68, 70, 70, 72, 75, 76, 78, 79, 60, 64, 67, 69, 71, 74, 65, 66, 68, 73, 77])
post_test_scores = np.array([70, 76, 78, 80, 82, 85, 86, 88, 90, 68, 72, 76, 78, 80, 83, 72, 74, 77, 80, 83])

# Membuat DataFrame untuk plotly
df = pd.DataFrame({
    'Sample': np.arange(1, len(pre_test_scores) + 1),
    'Pre-Test': pre_test_scores,
    'Post-Test': post_test_scores
})

# Membuat figure
fig = go.Figure()

# Menambahkan trace untuk Pre-Test
fig.add_trace(go.Scatter(
    x=df['Sample'],
    y=df['Pre-Test'],
    mode='lines+markers',
    name='Pre-Test',
    line=dict(color='blue', width=2, dash='dash'),
    marker=dict(size=8, color='blue')
))

# Menambahkan trace untuk Post-Test
fig.add_trace(go.Scatter(
    x=df['Sample'],
    y=df['Post-Test'],
    mode='lines+markers',
    name='Post-Test',
    line=dict(color='green', width=2),
    marker=dict(size=8, color='green')
))

# Menambahkan detail ke grafik
fig.update_layout(
    title='Perbandingan Skor Pre-Test dan Post-Test',
    title_font_size=16,
    title_font_family='Arial',
    xaxis_title='Sampel',
    yaxis_title='Skor',
    legend_title='Tipe Tes',
    xaxis=dict(showgrid=True, gridwidth=1, gridcolor='LightGray'),
    yaxis=dict(showgrid=True, gridwidth=1, gridcolor='LightGray'),
    template='plotly_white'
)

# Menampilkan grafik
fig.show()

import numpy as np
import pandas as pd
import plotly.graph_objects as go

# Data Pre-Test dan Post-Test
pre_test_scores = np.array([62, 68, 70, 70, 72, 75, 76, 78, 79, 60, 64, 67, 69, 71, 74, 65, 66, 68, 73, 77])
post_test_scores = np.array([70, 76, 78, 80, 82, 85, 86, 88, 90, 68, 72, 76, 78, 80, 83, 72, 74, 77, 80, 83])

# Membuat DataFrame untuk plotly
df = pd.DataFrame({
    'Sample': np.arange(1, len(pre_test_scores) + 1),
    'Pre-Test': pre_test_scores,
    'Post-Test': post_test_scores
})

# Membuat figure
fig = go.Figure()

# Menambahkan trace untuk Pre-Test sebagai area plot
fig.add_trace(go.Scatter(
    x=df['Sample'],
    y=df['Pre-Test'],
    mode='none',
    fill='tozeroy',
    name='Pre-Test',
    fillcolor='rgba(0, 102, 204, 0.3)',  # Warna biru transparan
    line=dict(color='blue')
))

# Menambahkan trace untuk Post-Test sebagai area plot
fig.add_trace(go.Scatter(
    x=df['Sample'],
    y=df['Post-Test'],
    mode='none',
    fill='tonexty',
    name='Post-Test',
    fillcolor='rgba(0, 204, 102, 0.3)',  # Warna hijau transparan
    line=dict(color='green')
))

# Menambahkan detail ke grafik
fig.update_layout(
    title='Perbandingan Skor Pre-Test dan Post-Test (Area Plot)',
    title_font_size=16,
    title_font_family='Arial',
    xaxis_title='Sampel',
    yaxis_title='Skor',
    xaxis=dict(showgrid=True, gridwidth=1, gridcolor='LightGray'),
    yaxis=dict(showgrid=True, gridwidth=1, gridcolor='LightGray'),
    template='plotly_white'
)

# Menampilkan grafik
fig.show()

import numpy as np
import pandas as pd
import plotly.express as px

# Data Pre-Test dan Post-Test
pre_test_scores = np.array([62, 68, 70, 70, 72, 75, 76, 78, 79, 60, 64, 67, 69, 71, 74, 65, 66, 68, 73, 77])
post_test_scores = np.array([70, 76, 78, 80, 82, 85, 86, 88, 90, 68, 72, 76, 78, 80, 83, 72, 74, 77, 80, 83])

# Membuat DataFrame untuk heatmap
df_heatmap = pd.DataFrame({
    'Sample': np.arange(1, len(pre_test_scores) + 1),
    'Pre-Test': pre_test_scores,
    'Post-Test': post_test_scores
})
df_heatmap['Change'] = df_heatmap['Post-Test'] - df_heatmap['Pre-Test']

# Membuat heatmap
fig = px.imshow(df_heatmap[['Pre-Test', 'Post-Test']].T,
                labels=dict(x='Sample', y='Test Type', color='Skor'),
                x=df_heatmap['Sample'],
                y=['Pre-Test', 'Post-Test'],
                color_continuous_scale='Viridis')

# Menambahkan detail ke grafik
fig.update_layout(
    title='Heatmap Perubahan Skor Pre-Test dan Post-Test',
    title_font_size=16,
    title_font_family='Arial',
    xaxis_title='Sampel',
    yaxis_title='Tipe Tes',
    coloraxis_colorbar=dict(title='Skor')
)

# Menampilkan grafik
fig.show()

import numpy as np
import matplotlib.pyplot as plt
import scipy.stats as stats

# Define the t-statistic and p-value
t_statistic = 30.86
p_value = 0.0000

# Define degrees of freedom (for this example, we will use a reasonable value)
# Adjust this based on your actual degrees of freedom
df = 19  # Example degrees of freedom

# Generate x values for the t-distribution curve
x = np.linspace(-50, 50, 1000)
y = stats.t.pdf(x, df)

# Create the plot
plt.figure(figsize=(10, 6))

# Plot the t-distribution curve
plt.plot(x, y, label='T-distribution', color='blue')

# Plot the t-statistic line
plt.axvline(x=t_statistic, color='red', linestyle='--', label=f'T-statistic = {t_statistic:.2f}')

# Highlight the rejection region for one-tailed test
x_fill = np.linspace(t_statistic, 50, 500)
y_fill = stats.t.pdf(x_fill, df)
plt.fill_between(x_fill, y_fill, color='red', alpha=0.3, label='Rejection Region')

# Add labels and title
plt.title('T-Distribution with T-Statistic and Rejection Region')
plt.xlabel('T-Statistic')
plt.ylabel('Density')
plt.legend()
plt.grid(True)

# Show the plot
plt.show()

import numpy as np
import matplotlib.pyplot as plt
from scipy import stats

# Nilai t-statistik dan p-value yang diberikan
t_stat = 30.86
p_value = 0.0000

# Degrees of freedom (n-1), dengan n = 20
df = 20 - 1

# Menghitung t-crit untuk one-tailed test (signifikansi 0.05)
alpha = 0.05
t_crit = stats.t.ppf(1 - alpha, df)

# Rentang untuk visualisasi
x = np.linspace(-40, 40, 500)
y = stats.t.pdf(x, df)

# Plot distribusi t
plt.plot(x, y, label='Distribusi t', color='blue')

# Menambahkan garis vertikal untuk t-statistik
plt.axvline(t_stat, color='red', linestyle='--', label=f't-statistik: {t_stat}')

# Menambahkan garis vertikal untuk t-critical
plt.axvline(t_crit, color='green', linestyle='--', label=f't-crit: {t_crit:.2f} (alpha = {alpha})')

# Menambahkan area di luar t-crit
plt.fill_between(x, y, 0, where=(x >= t_crit), color='green', alpha=0.3, label='Area alpha')

# Label dan judul
plt.title('Distribusi t dan t-statistik untuk Uji t Berpasangan (One-Tailed)')
plt.xlabel('Nilai t')
plt.ylabel('Densitas Probabilitas')
plt.legend()

# Menampilkan plot
plt.show()

# Interpretasi hasil
print(f"Nilai t-statistik: {t_stat}")
print(f"Nilai p-value: {p_value}")
if p_value < alpha:
    print(f"P-value ({p_value}) lebih kecil dari alpha ({alpha}). Oleh karena itu, kita menolak hipotesis nol.")
else:
    print(f"P-value ({p_value}) lebih besar dari alpha ({alpha}). Oleh karena itu, kita gagal menolak hipotesis nol.")